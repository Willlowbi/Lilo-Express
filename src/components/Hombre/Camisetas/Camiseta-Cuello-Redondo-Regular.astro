<section class="overflow-hidde py-11 font-poppin">
    <div class="max-w-6xl px-2 py-4 mx-auto lg:py-8">
        <div class="flex flex-wrap -mx-4">
            <div class="w-full px-1 md:w-1/2">
                <div class="sticky overflow-hidden flex">
                    <!-- Contenedor para las imágenes secundarias -->
                    <div class="flex flex-col space-y-2">
                        <!-- Estableciendo las dimensiones para las imágenes secundarias -->
                        <div>
                            <a href="">
                                <img
                                    src="/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra-Mini.jpg"
                                    alt=""
                                    data-main-img-src="/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra.jpg"
                                    class="object-cover rounded-lg thumbnail selected"
                                    style="width: 255px; height: 110px;"
                                />
                            </a>
                        </div>
                        <div>
                            <a href="">
                                <img
                                    src="/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra-2-Mini.jpg"
                                    alt=""
                                    class="object-cover rounded-lg thumbnail"
                                    data-main-img-src="/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra-2.jpg"
                                    style="width: 255px; height: 110px;"
                                />
                            </a>
                        </div>
                        <div>
                            <a href="">
                                <img
                                    src="/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra-3-Mini.jpg"
                                    alt=""
                                    class="object-cover rounded-lg thumbnail"
                                    data-main-img-src="/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra-3.jpg"
                                    style="width: 255px; height: 110px;"
                                />
                            </a>
                        </div>
                        <div>
                            <a href="">
                                <img
                                    src="/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra-4-Mini.jpg"
                                    alt=""
                                    class="object-cover rounded-lg thumbnail"
                                    data-main-img-src="/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra-4.jpg"
                                    style="width: 255px; height: 110px;"
                                />
                            </a>
                        </div>
                    </div>

                    <!-- Contenedor para la imagen principal -->
                    <div class="relative mb-6 lg:mb-10 lg:h-2/4 ml-4 lupa-container">
                        <img
                            id="mainImage"
                            src="/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra.jpg"
                            alt="Camiseta Cuello Redondo Negra"
                            class="object-cover w-full lg:h-full"
                            style="width: 1579px; height: 719px;"
                        />
                    </div>
                </div>
            </div>
            <div class="w-full px-1 md:w-1/2">
                <div class="lg:pl-20">
                    <div class="mb-8">
                        <h1 id="productName" class="max-w-xl mt-2 mb-6 text-2xl font-bold md:text-4xl">
                            Camiseta de Cuello Redondo Regular
                        </h1>                        
                        <p class="max-w-md mb-8 text-gray-700">
                            Camiseta de corte estándar en punto suave de algodón
                            con cuello redondo con ribete acanalado y bajo
                            recto.
                        </p>
                        <p class="inline-block mb-8 text-4xl font-bold text-gray-700">
                            <span id="productPrice">$19.900 COP</span>
                        </p>                        
                        <p id="stock" class="text-green-700 font-bold">150 en stock</p>
                    </div>
                    <div class="flex items-center mb-8">
                        <h2 class="w-16 mr-6 text-xl font-bold">Color:</h2>
                        <div class="flex flex-wrap -mx-2 -mb-2">
                            <button data-color="negro" class="p-1 mb-2 mr-2 border border-gray-500 hover:border-black">
                                <div class="w-6 h-6 bg-black"></div>
                            </button>                                                                                 
                            <button data-color="azul" class="p-1 mb-2 mr-2 border border-gray-500 hover:border-black">
                                <div class="w-6 h-6 bg-blue-900"></div>
                            </button>
                            <button class="p-1 mb-2 border border-gray-500 hover:border-black" data-color="verde">
                                <div class="w-6 h-6" style="background-color: #8A865D;"></div>
                            </button>
                        </div>
                    </div>
                    <div class="flex items-center mb-8">
                        <h2 class="w-16 text-xl font-bold mr-4">Tallas:</h2>
                        <div class="flex flex-wrap -mx-2 -mb-2">
                            <button class="size-btn py-1 mb-2 mr-2 border w-11 hover:border-black border-gray-500">XS</button>
                            <button class="size-btn py-1 mb-2 mr-2 border w-11 hover:border-black border-gray-500">S</button>
                            <button class="size-btn py-1 mb-2 mr-2 border w-11 hover:border-black border-gray-500">M</button>
                            <button class="size-btn py-1 mb-2 mr-2 border w-11 hover:border-black border-gray-500">L</button>
                            <button class="size-btn py-1 mb-2 mr-2 border w-11 hover:border-black border-gray-500">XL</button>
                            <button class="size-btn py-1 mb-2 mr-2 border w-11 hover:border-black border-gray-500">XXL</button>
                        </div>                        
                    </div>
                    <div class="w-32 mb-8">
                        <label
                            for=""
                            class="w-full text-xl font-semibold text-gray-700"
                            >Cantidad</label
                        >
                        <div
                            class="relative flex flex-row w-full h-10 mt-4 bg-transparent rounded-lg"
                        >
                            <button
                                id="decrement"
                                class="w-20 h-full text-gray-600 bg-gray-300 rounded-l outline-none cursor-pointer dark:text-gray-400 hover:text-gray-700 hover:bg-gray-400"
                            >
                                <span class="m-auto text-2xl font-thin">-</span>
                            </button>
                            <input
                                type="number"
                                id="inputValue"
                                value="1"
                                class="flex items-center w-full font-semibold text-center text-gray-700 placeholder-gray-700 bg-gray-300 outline-none focus:outline-none text-md hover:text-black"
                                placeholder="1"
                            />
                            <button
                                id="increment"
                                class="w-20 h-full text-gray-600 bg-gray-300 rounded-r outline-none cursor-pointer dark:text-gray-400 hover:text-gray-700 hover:bg-gray-400"
                            >
                                <span class="m-auto text-2xl font-thin">+</span>
                            </button>
                        </div>
                    </div>
                    <div class="flex flex-wrap items-center -mx-4">
                        <div class="w-full px-4 mb-4 lg:w-1/2 lg:mb-0">
                            <button class="addToCartButton flex items-center justify-center w-full p-4 font-bold text-black border-2 border-black rounded-md hover:bg-black hover:border-black hover:text-white">
                                Añadir al carrito
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<style>
    /* Para Firefox */
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
    /* Para Chrome, Safari, Edge, Opera */
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
    input[type="number"] {
        -moz-appearance: textfield; /* Para Firefox */
    }
    .size-btn {
        border: 1px solid gray; /* Valor original */
        box-sizing: border-box;
    }
    .selected_btn {
        border: 2px solid black;
        padding: 0px; /* Reducir el padding en 1px para compensar el borde más grueso */
    }
    .selected {
        border: 2px solid black;
    }
    /* Estilos para cuando la lupa está activa */
    .lupa-cursor {
        cursor: none; /* Oculta el cursor predeterminado */
        --lupa-x: 0px; /* Posición inicial X para la lupa */
        --lupa-y: 0px; /* Posición inicial Y para la lupa */
        /* Aplica una transición suave a las variables para el efecto de seguimiento */
        transition: --lupa-x 0.1s ease, --lupa-y 0.1s ease;
    }
    .lupa-cursor::before {
        content: ''; /* Crea un pseudo-elemento */
        position: absolute;
        top: 0;
        left: 0;
        width: 170px; /* Tamaño de la lupa */
        height: 170px;
        border: 3px solid #000;
        border-radius: 50%;
        background-repeat: no-repeat;
        pointer-events: none; /* Evita que el pseudo-elemento interfiera con los eventos del mouse */
        z-index: 100;
        transform: translate(calc(var(--lupa-x) - 50%), calc(var(--lupa-y) - 50%));
        background-image: var(--image-url);
        background-size: 500%; /* El nivel de zoom */
        background-position: var(--lupa-bg-x) var(--lupa-bg-y);
    }
    /* Clase para ocultar el pseudo-elemento cuando no se necesite */
    .lupa-cursor-none::before {
        display: none;
        /* Asegúrate de que la transición también se aplique al ocultar */
        opacity: 0;
        visibility: hidden;
        transition: visibility 0s 0.1s, opacity 0.1s ease;
    }
</style>
<script>
    document.addEventListener("DOMContentLoaded", function() {
        const mainImage = document.getElementById('mainImage');
        const thumbnails = document.querySelectorAll('.thumbnail');

        thumbnails.forEach(thumb => {
            thumb.addEventListener('click', function(event) {
                if (event.target instanceof HTMLImageElement && mainImage && mainImage instanceof HTMLImageElement) {
                    // Actualizar el src de la imagen principal
                    const newMainImgSrc = event.target.getAttribute('data-main-img-src');
                    if (newMainImgSrc) {
                        mainImage.src = newMainImgSrc;
                    }

                    // Establecer borde negro a la imagen secundaria seleccionada
                    event.target.classList.add('selected');

                    // Quitar el borde negro de las otras imágenes secundarias
                    thumbnails.forEach(otherThumb => {
                        if (otherThumb !== event.target) {
                            otherThumb.classList.remove('selected');
                        }
                    });
                }

                event.preventDefault(); // Para evitar que el navegador siga el enlace
            });
        });
    });
    const colorImageMap = {
        'negro': {
            main: [
                "/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra-2.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra-3.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra-4.jpg",
            ],
            thumbnail: [
                "/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra-Mini.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra-2-Mini.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra-3-Mini.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Negro/Camiseta-Cuello-Redondo-Negra-4-Mini.jpg",
            ]
        },
        'azul': {
            main: [
                "/images/Hombres/Camisetas/Cuello Redondo/Azul/Camiseta-Cuello-Redondo-Azul.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Azul/Camiseta-Cuello-Redondo-Azul-2.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Azul/Camiseta-Cuello-Redondo-Azul-3.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Azul/Camiseta-Cuello-Redondo-Azul-4.jpg",
            ],
            thumbnail: [
                "/images/Hombres/Camisetas/Cuello Redondo/Azul/Camiseta-Cuello-Redondo-Azul-Mini.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Azul/Camiseta-Cuello-Redondo-Azul-2-Mini.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Azul/Camiseta-Cuello-Redondo-Azul-3-Mini.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Azul/Camiseta-Cuello-Redondo-Azul-4-Mini.jpg",
            ]
        },
        'verde': {
            main: [
                "/images/Hombres/Camisetas/Cuello Redondo/Verde/Camiseta-Cuello-Redondo-Verde.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Verde/Camiseta-Cuello-Redondo-Verde-2.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Verde/Camiseta-Cuello-Redondo-Verde-3.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Verde/Camiseta-Cuello-Redondo-Verde-4.jpg",
            ],
            thumbnail: [
                "/images/Hombres/Camisetas/Cuello Redondo/Verde/Camiseta-Cuello-Redondo-Verde-Mini.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Verde/Camiseta-Cuello-Redondo-Verde-2-Mini.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Verde/Camiseta-Cuello-Redondo-Verde-3-Mini.jpg",
                "/images/Hombres/Camisetas/Cuello Redondo/Verde/Camiseta-Cuello-Redondo-Verde-4-Mini.jpg",
            ]
        },
    };
    document.addEventListener("DOMContentLoaded", function() {
        const mainImage = document.getElementById('mainImage') as HTMLImageElement;
        const thumbnails = document.querySelectorAll('.thumbnail');
        const colorButtons = document.querySelectorAll('[data-color]');

        colorButtons.forEach(buttonElement => {
            const button = buttonElement as HTMLElement; // Aserción de tipo aquí
            button.addEventListener('click', function(event) {
                const target = event.currentTarget as HTMLElement; // Aserción de tipo aquí
                const color = target.getAttribute('data-color');
                if (color) {
                    updateImagesForColor(color, target);
                }
            });
        });

        function updateImagesForColor(color, buttonElement) {
            const button = buttonElement as HTMLElement; // Aserción de tipo aquí
            const imageSet = colorImageMap[color];
            if (imageSet) {
                thumbnails.forEach((thumbElement, index) => {
                    const thumb = thumbElement as HTMLImageElement; // Aserción de tipo aquí
                    if (index < imageSet.thumbnail.length) {
                        thumb.src = imageSet.thumbnail[index];
                        thumb.setAttribute('data-main-img-src', imageSet.main[index]);
                    }
                });
                mainImage.src = thumbnails[0].getAttribute('data-main-img-src') || '';

                thumbnails.forEach((thumbnailElement) => {
                    const thumbnail = thumbnailElement as HTMLElement; // Aserción de tipo aquí
                    thumbnail.classList.remove('selected');
                });
                thumbnails[0].classList.add('selected');

                colorButtons.forEach((btnElement) => {
                    const btn = btnElement as HTMLElement; // Aserción de tipo aquí
                    btn.classList.remove('selected');
                    btn.style.border = btn === button ? '2px solid black' : '1px solid gray';
                });
                button.classList.add('selected');
                button.style.border = '2px solid black';
            }
        }

        // Inicializar el estado seleccionado para el color negro
        const defaultColor = 'negro';
        const defaultButton = document.querySelector(`[data-color="${defaultColor}"]`) as HTMLElement; // Aserción de tipo aquí
        if (defaultButton) {
            updateImagesForColor(defaultColor, defaultButton);
        }
    });
    document.addEventListener("DOMContentLoaded", function() {
        const mainImageContainer = document.querySelector('.relative.mb-6.lg\\:mb-10.lg\\:h-2\\/4.ml-4');
        const mainImage = document.getElementById('mainImage') as HTMLImageElement; // Especificar que mainImage es un HTMLImageElement

        if (mainImageContainer && mainImage) {
            mainImageContainer.addEventListener('mousemove', function(e) {
                const mouseEvent = e as MouseEvent; // Especificar que e es un MouseEvent
                const bounds = mainImageContainer.getBoundingClientRect();
                let x = mouseEvent.pageX - bounds.left - window.scrollX;
                let y = mouseEvent.pageY - bounds.top - window.scrollY;

            // Asegúrate de que el tipo de mainImageContainer sea HTMLElement para acceder a style
            const imageContainer = mainImageContainer as HTMLElement;

            // Obtén la imagen actual
            const imageUrl = mainImage.src;
            // Actualiza el background-image del pseudo-elemento con la imagen actual
            document.documentElement.style.setProperty('--image-url', `url(${imageUrl})`);

            const zoomLevel = 5; // El nivel de zoom
            const bgX = (x / bounds.width) * 100;
            const bgY = (y / bounds.height) * 100;

            imageContainer.style.setProperty('--lupa-bg-x', `${bgX}%`);
            imageContainer.style.setProperty('--lupa-bg-y', `${bgY}%`);

            const lupaRadius = 80;
            x = Math.max(x, lupaRadius);
            y = Math.max(y, lupaRadius);
            x = Math.min(x, bounds.width - lupaRadius);
            y = Math.min(y, bounds.height - lupaRadius);

            imageContainer.style.setProperty('--lupa-x', `${x}px`);
            imageContainer.style.setProperty('--lupa-y', `${y}px`);
        });

            mainImageContainer.addEventListener('mouseenter', function() {
                // Asegúrate de que el tipo de mainImageContainer sea HTMLElement
                const imageContainer = mainImageContainer as HTMLElement;
                // Asegúrate de actualizar la imagen al entrar
                const imageUrl = mainImage.src;
                document.documentElement.style.setProperty('--image-url', `url(${imageUrl})`);
                imageContainer.classList.add('lupa-cursor');
                imageContainer.classList.remove('lupa-cursor-none');
            });

            mainImageContainer.addEventListener('mouseleave', function() {
                // Asegúrate de que el tipo de mainImageContainer sea HTMLElement
                const imageContainer = mainImageContainer as HTMLElement;
                imageContainer.classList.remove('lupa-cursor');
                imageContainer.classList.add('lupa-cursor-none');
            });
        }
    });
    document.addEventListener("DOMContentLoaded", function() {
        let maxStock = 0;
        const addToCartButton = document.querySelector('.addToCartButton') as HTMLButtonElement; // Asegúrate de que este selector sea correcto.
        const stockElement = document.getElementById('stock');
        const colorButtons = document.querySelectorAll('[data-color]');
        const sizeButtons = document.querySelectorAll('.size-btn');
        let input = document.getElementById("inputValue") as HTMLInputElement;
        let incrementButton = document.getElementById("increment") as HTMLButtonElement;
        let decrementButton = document.getElementById("decrement") as HTMLButtonElement;
        let selectedColor = 'negro'; // Color predeterminado seleccionado
        let selectedSize = null;

        // Función para obtener y actualizar el stock desde el servidor
        function fetchAndUpdateStock(productName, color, size = '') {
            let endpoint = `http://localhost:3001/stock/${encodeURIComponent(productName)}/${encodeURIComponent(color)}`;
            if (size) {
                endpoint += `/${encodeURIComponent(size)}`;
            }

            fetch(endpoint)
                .then(response => response.json())
                .then(data => {
                    maxStock = size ? data.stock : data.totalStock; // Actualizamos la variable maxStock
                    stockElement.textContent = `${maxStock} en stock`;
                    updateButtonsState(); // Actualizamos el estado de los botones
                })
                .catch(error => {
                    console.error('Error fetching stock:', error);
                    stockElement.textContent = `Error al cargar el stock`;
                });
        }

        function resetSelectionAndStock() {
            sizeButtons.forEach(btn => btn.classList.remove('selected_btn'));
            input.value = '1'; // Resetea el valor del input al valor inicial
            maxStock = 0; // Resetea el stock máximo
            updateButtonsState(); // Actualiza el estado de los botones
            fetchAndUpdateStock('Camiseta de Cuello Redondo Regular', selectedColor);
        }

        // Actualizamos la función updateButtonsState para usar maxStock
        function updateButtonsState() {
            let currentValue = parseInt(input.value) || 0;
            let isDisabled = selectedSize === null || maxStock === 0;
            incrementButton.disabled = isDisabled || currentValue >= maxStock;
            decrementButton.disabled = isDisabled || currentValue <= 1;
            input.disabled = isDisabled;
            addToCartButton.disabled = isDisabled;
        }

        addToCartButton.addEventListener('click', function() {
            const input = document.getElementById('inputValue') as HTMLButtonElement; // Asegúrate de que este ID coincida con tu input de cantidad
            const cantidad = parseInt(input.value) || 0;
    
            // Asegúrate de que estos selectores coincidan con tu estructura de HTML
            const nombre = document.getElementById('productName').textContent.trim();
            const color = document.querySelector('[data-color].selected').getAttribute('data-color');
            const talla = document.querySelector('.size-btn.selected_btn').textContent.trim();
            const  precio = document.getElementById('productPrice').textContent.replace(/[^0-9]+/g, "")

            const productData = {
                categoria: 'Hombre',
                tipo: 'Ropa',
                nombre: nombre,
                detalles: {
                    tipoPrenda: 'Camiseta',
                    color: color,
                    talla: talla,
                    precio: precio
                },
                cantidad: cantidad
            };
            fetch('http://localhost:3001/products', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    // Aquí añadirías cualquier cabecera adicional necesaria.
                },
                body: JSON.stringify(productData)
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Si el estado no es ok, entonces hay algún error.
                    // Ahora esperamos que todos los errores vengan como JSON.
                    return response.json().then(data => {
                        throw new Error(data.message || "Algo salió mal al añadir al carrito");
                    });
                }
            })
            .then(data => {
                console.log('Producto añadido con éxito:', data);
                fetchAndUpdateStock(productData.nombre, productData.detalles.color, productData.detalles.talla);
            })
            .catch((error) => {
                console.error('Error al añadir producto:', error);
                // Aquí puedes decidir si deseas mostrar una alerta o manipular de otra forma el error.
                alert(error.message); // Mostrar mensaje de error al usuario
            });
        });

         // Eventos para los inputs y botones
         input.addEventListener("input", function() {
            let value = this.value;
            // Permitir solo dígitos y evitar que el valor sea solo un '0'
            value = value.replace(/^0+/, '').replace(/[^0-9]/g, '');
            // Convertir a número y asegurarse de que no exceda el stock
            let numValue = parseInt(value, 10);
            if (numValue > maxStock) {
                numValue = maxStock;
            }
            // Si el valor no es numérico, dejarlo en blanco, de lo contrario, asignar el valor corregido
            this.value = isNaN(numValue) ? '' : numValue.toString();
            // Actualizar el estado de los botones
            updateButtonsState();
        });

        input.addEventListener("blur", function() {
            let currentValue = parseInt(this.value, 10);
            // Ajustar el valor al mínimo si está vacío o es 0, o al máximo si excede el stock
            if (isNaN(currentValue) || currentValue < 1) {
                this.value = '1';
            } else if (currentValue > maxStock) {
                this.value = maxStock.toString();
            }
            updateButtonsState();
        });

        input.addEventListener("keypress", function(event) {
            if (event.key === 'Enter') {
                event.preventDefault(); // Prevenir cualquier acción predeterminada del Enter
                input.blur(); // Esto removerá el foco del input
            }
        });

        decrementButton.addEventListener("click", function () {
            let currentValue = parseInt(input.value) || 0;
            if (currentValue > 1) {
                input.value = (currentValue - 1).toString();
                updateButtonsState();
            }
        });

        incrementButton.addEventListener("click", function () {
            let currentValue = parseInt(input.value) || 0;
            if (currentValue < maxStock) {
                input.value = (currentValue + 1).toString();
                updateButtonsState();
            }
        });

        // En el evento de click para los botones de color, actualiza para el total de stock del color
        colorButtons.forEach(button => {
            button.addEventListener('click', function() {
                selectedColor = this.getAttribute('data-color');
                selectedSize = null; // Resetea la talla seleccionada
                resetSelectionAndStock(); // Resetea la selección y el stock al cambiar de color
                fetchAndUpdateStock('Camiseta de Cuello Redondo Regular', selectedColor);
            });
        });

        // Evento para botones de talla
        sizeButtons.forEach((button) => {
            button.addEventListener("click", function (event) {
                const newSize = this.textContent?.trim() || null;
                if (selectedSize !== newSize) {
                    selectedSize = newSize;
                    sizeButtons.forEach((btn) => btn.classList.remove("selected_btn"));
                    this.classList.add("selected_btn");

                    // Resetear el input a 1 al cambiar de talla
                    input.value = '1'; 

                    // Actualizar el estado de los botones
                    updateButtonsState();

                    // Ahora llamar a fetchAndUpdateStock actualizará el stock basado en la nueva talla
                    fetchAndUpdateStock('Camiseta de Cuello Redondo Regular', selectedColor, selectedSize);
                } else {
                    resetSelectionAndStock();
                    selectedSize = null; // Resetea la talla seleccionada
                }
                event.stopPropagation();
            });
        });

        // Inicializa la visualización de stock con el color predeterminado y sin talla seleccionada
        fetchAndUpdateStock('Camiseta de Cuello Redondo Regular', selectedColor, '');
    });        
</script>
